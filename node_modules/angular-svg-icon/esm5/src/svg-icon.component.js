/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, Input, KeyValueDiffers, Renderer2 } from '@angular/core';
import { SvgIconRegistryService } from './svg-icon-registry.service';
var SvgIconComponent = /** @class */ (function () {
    function SvgIconComponent(element, differs, renderer, iconReg) {
        this.element = element;
        this.differs = differs;
        this.renderer = renderer;
        this.iconReg = iconReg;
        this.stretch = false;
    }
    Object.defineProperty(SvgIconComponent.prototype, "svgStyle", {
        // Adapted from ngStyle
        set: 
        // Adapted from ngStyle
        /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._svgStyle = v;
            if (!this.differ && v) {
                this.differ = this.differs.find(v).create();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SvgIconComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.init();
    };
    /**
     * @return {?}
     */
    SvgIconComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy();
    };
    /**
     * @param {?} changeRecord
     * @return {?}
     */
    SvgIconComponent.prototype.ngOnChanges = /**
     * @param {?} changeRecord
     * @return {?}
     */
    function (changeRecord) {
        if (changeRecord['src']) {
            if (this.svg) {
                this.destroy();
            }
            this.init();
        }
        if (changeRecord['stretch']) {
            this.stylize();
        }
    };
    /**
     * @return {?}
     */
    SvgIconComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        if (this.svg && this.differ) {
            /** @type {?} */
            var changes = this.differ.diff(this._svgStyle);
            if (changes) {
                this.applyChanges(changes);
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    SvgIconComponent.prototype.init = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.icnSub = this.iconReg.loadSvg(this.src).subscribe(function (svg) {
            _this.setSvg(svg);
            _this.resetDiffer();
        });
    };
    /**
     * @private
     * @return {?}
     */
    SvgIconComponent.prototype.destroy = /**
     * @private
     * @return {?}
     */
    function () {
        this.svg = undefined;
        this.differ = undefined;
        if (this.icnSub) {
            this.icnSub.unsubscribe();
        }
    };
    /**
     * @private
     * @return {?}
     */
    SvgIconComponent.prototype.resetDiffer = /**
     * @private
     * @return {?}
     */
    function () {
        if (this._svgStyle && !this.differ) {
            this.differ = this.differs.find(this._svgStyle).create();
        }
    };
    /**
     * @private
     * @param {?} svg
     * @return {?}
     */
    SvgIconComponent.prototype.setSvg = /**
     * @private
     * @param {?} svg
     * @return {?}
     */
    function (svg) {
        if (svg) {
            this.svg = svg;
            /** @type {?} */
            var icon = (/** @type {?} */ (svg.cloneNode(true)));
            /** @type {?} */
            var elem = this.element.nativeElement;
            elem.innerHTML = '';
            this.renderer.appendChild(elem, icon);
            this.stylize();
        }
    };
    /**
     * @private
     * @return {?}
     */
    SvgIconComponent.prototype.stylize = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.svg) {
            /** @type {?} */
            var svg = this.element.nativeElement.firstChild;
            if (this.stretch === true) {
                this.renderer.setAttribute(svg, 'preserveAspectRatio', 'none');
            }
            else if (this.stretch === false) {
                this.renderer.removeAttribute(svg, 'preserveAspectRatio');
            }
        }
    };
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    SvgIconComponent.prototype.applyChanges = /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        changes.forEachRemovedItem(function (record) { return _this.setStyle(record.key, null); });
        changes.forEachAddedItem(function (record) { return _this.setStyle(record.key, record.currentValue); });
        changes.forEachChangedItem(function (record) { return _this.setStyle(record.key, record.currentValue); });
    };
    /**
     * @private
     * @param {?} nameAndUnit
     * @param {?} value
     * @return {?}
     */
    SvgIconComponent.prototype.setStyle = /**
     * @private
     * @param {?} nameAndUnit
     * @param {?} value
     * @return {?}
     */
    function (nameAndUnit, value) {
        var _a = tslib_1.__read(nameAndUnit.split('.'), 2), name = _a[0], unit = _a[1];
        value = value !== null && unit ? "" + value + unit : value;
        /** @type {?} */
        var svg = this.element.nativeElement.firstChild;
        if (value !== null) {
            this.renderer.setStyle(svg, name, (/** @type {?} */ (value)));
        }
        else {
            this.renderer.removeStyle(svg, name);
        }
    };
    SvgIconComponent.decorators = [
        { type: Component, args: [{
                    selector: 'svg-icon',
                    template: '<ng-content></ng-content>',
                    styles: [":host { display: inline-block; }"]
                }] }
    ];
    /** @nocollapse */
    SvgIconComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: KeyValueDiffers },
        { type: Renderer2 },
        { type: SvgIconRegistryService }
    ]; };
    SvgIconComponent.propDecorators = {
        src: [{ type: Input }],
        stretch: [{ type: Input }],
        svgStyle: [{ type: Input }]
    };
    return SvgIconComponent;
}());
export { SvgIconComponent };
if (false) {
    /** @type {?} */
    SvgIconComponent.prototype.src;
    /** @type {?} */
    SvgIconComponent.prototype.stretch;
    /**
     * @type {?}
     * @private
     */
    SvgIconComponent.prototype.svg;
    /**
     * @type {?}
     * @private
     */
    SvgIconComponent.prototype.icnSub;
    /**
     * @type {?}
     * @private
     */
    SvgIconComponent.prototype.differ;
    /**
     * @type {?}
     * @private
     */
    SvgIconComponent.prototype._svgStyle;
    /**
     * @type {?}
     * @private
     */
    SvgIconComponent.prototype.element;
    /**
     * @type {?}
     * @private
     */
    SvgIconComponent.prototype.differs;
    /**
     * @type {?}
     * @private
     */
    SvgIconComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    SvgIconComponent.prototype.iconReg;
}
//# sourceMappingURL=data:application/json;base64,