/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, InjectionToken, Optional, SkipSelf } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { of as observableOf, throwError as observableThrowError } from 'rxjs';
import { map, tap, catchError, finalize, share } from 'rxjs/operators';
import { PLATFORM_ID } from '@angular/core';
import { DOCUMENT } from '@angular/common';
/** @type {?} */
export const SERVER_URL = new InjectionToken('SERVER_URL');
export class SvgIconRegistryService {
    /**
     * @param {?} http
     * @param {?} platformId
     * @param {?} serverUrl
     * @param {?} _document
     */
    constructor(http, platformId, serverUrl, _document) {
        this.http = http;
        this.platformId = platformId;
        this.serverUrl = serverUrl;
        this._document = _document;
        this.iconsByUrl = new Map();
        this.iconsLoadingByUrl = new Map();
        this.document = this._document;
    }
    /**
     * Add a SVG to the registry by passing a name and the SVG.
     * @param {?} name
     * @param {?} data
     * @return {?}
     */
    addSvg(name, data) {
        if (!this.iconsByUrl.has(name)) {
            /** @type {?} */
            const div = this.document.createElement('DIV');
            div.innerHTML = data;
            /** @type {?} */
            const svg = (/** @type {?} */ (div.querySelector('svg')));
            this.iconsByUrl.set(name, svg);
        }
    }
    /**
     * Load a SVG to the registry from a URL.
     * @param {?} url
     * @return {?}
     */
    loadSvg(url) {
        if (this.serverUrl && url.match(/^(http(s)?):/) === null) {
            url = this.serverUrl + url;
        }
        if (this.iconsByUrl.has(url)) {
            return observableOf(this.iconsByUrl.get(url));
        }
        else if (this.iconsLoadingByUrl.has(url)) {
            return this.iconsLoadingByUrl.get(url);
        }
        else {
            /** @type {?} */
            const o = (/** @type {?} */ (this.http.get(url, { responseType: 'text' }).pipe(map(svg => {
                /** @type {?} */
                const div = this.document.createElement('DIV');
                div.innerHTML = svg;
                return (/** @type {?} */ (div.querySelector('svg')));
            }), tap(svg => this.iconsByUrl.set(url, svg)), catchError(err => {
                console.error(err);
                return observableThrowError(err);
            }), finalize(() => this.iconsLoadingByUrl.delete(url)), share())));
            this.iconsLoadingByUrl.set(url, o);
            return o;
        }
    }
    /**
     * Remove a SVG from the registry by URL (or name).
     * @param {?} url
     * @return {?}
     */
    unloadSvg(url) {
        if (this.iconsByUrl.has(url)) {
            this.iconsByUrl.delete(url);
        }
    }
}
SvgIconRegistryService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SvgIconRegistryService.ctorParameters = () => [
    { type: HttpClient },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [SERVER_URL,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    SvgIconRegistryService.prototype.document;
    /**
     * @type {?}
     * @private
     */
    SvgIconRegistryService.prototype.iconsByUrl;
    /**
     * @type {?}
     * @private
     */
    SvgIconRegistryService.prototype.iconsLoadingByUrl;
    /**
     * @type {?}
     * @private
     */
    SvgIconRegistryService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    SvgIconRegistryService.prototype.platformId;
    /**
     * @type {?}
     * @protected
     */
    SvgIconRegistryService.prototype.serverUrl;
    /**
     * @type {?}
     * @private
     */
    SvgIconRegistryService.prototype._document;
}
/**
 * @param {?} parentRegistry
 * @param {?} http
 * @param {?} platformId
 * @param {?=} serverUrl
 * @param {?=} document
 * @return {?}
 */
export function SVG_ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, http, platformId, serverUrl, document) {
    return parentRegistry || new SvgIconRegistryService(http, platformId, serverUrl, document);
}
/** @type {?} */
export const SVG_ICON_REGISTRY_PROVIDER = {
    provide: SvgIconRegistryService,
    deps: [[new Optional(), new SkipSelf(), SvgIconRegistryService], HttpClient, [(/** @type {?} */ (PLATFORM_ID))],
        [new Optional(), (/** @type {?} */ (SERVER_URL))], [new Optional(), (/** @type {?} */ (DOCUMENT))]
    ],
    useFactory: SVG_ICON_REGISTRY_PROVIDER_FACTORY
};
//# sourceMappingURL=data:application/json;base64,