/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Input, KeyValueDiffers, Renderer2 } from '@angular/core';
import { SvgIconRegistryService } from './svg-icon-registry.service';
export class SvgIconComponent {
    /**
     * @param {?} element
     * @param {?} differs
     * @param {?} renderer
     * @param {?} iconReg
     */
    constructor(element, differs, renderer, iconReg) {
        this.element = element;
        this.differs = differs;
        this.renderer = renderer;
        this.iconReg = iconReg;
        this.stretch = false;
    }
    // Adapted from ngStyle
    /**
     * @param {?} v
     * @return {?}
     */
    set svgStyle(v) {
        this._svgStyle = v;
        if (!this.differ && v) {
            this.differ = this.differs.find(v).create();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.init();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy();
    }
    /**
     * @param {?} changeRecord
     * @return {?}
     */
    ngOnChanges(changeRecord) {
        if (changeRecord['src']) {
            if (this.svg) {
                this.destroy();
            }
            this.init();
        }
        if (changeRecord['stretch']) {
            this.stylize();
        }
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        if (this.svg && this.differ) {
            /** @type {?} */
            const changes = this.differ.diff(this._svgStyle);
            if (changes) {
                this.applyChanges(changes);
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    init() {
        this.icnSub = this.iconReg.loadSvg(this.src).subscribe(svg => {
            this.setSvg(svg);
            this.resetDiffer();
        });
    }
    /**
     * @private
     * @return {?}
     */
    destroy() {
        this.svg = undefined;
        this.differ = undefined;
        if (this.icnSub) {
            this.icnSub.unsubscribe();
        }
    }
    /**
     * @private
     * @return {?}
     */
    resetDiffer() {
        if (this._svgStyle && !this.differ) {
            this.differ = this.differs.find(this._svgStyle).create();
        }
    }
    /**
     * @private
     * @param {?} svg
     * @return {?}
     */
    setSvg(svg) {
        if (svg) {
            this.svg = svg;
            /** @type {?} */
            const icon = (/** @type {?} */ (svg.cloneNode(true)));
            /** @type {?} */
            const elem = this.element.nativeElement;
            elem.innerHTML = '';
            this.renderer.appendChild(elem, icon);
            this.stylize();
        }
    }
    /**
     * @private
     * @return {?}
     */
    stylize() {
        if (this.svg) {
            /** @type {?} */
            const svg = this.element.nativeElement.firstChild;
            if (this.stretch === true) {
                this.renderer.setAttribute(svg, 'preserveAspectRatio', 'none');
            }
            else if (this.stretch === false) {
                this.renderer.removeAttribute(svg, 'preserveAspectRatio');
            }
        }
    }
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    applyChanges(changes) {
        changes.forEachRemovedItem((record) => this.setStyle(record.key, null));
        changes.forEachAddedItem((record) => this.setStyle(record.key, record.currentValue));
        changes.forEachChangedItem((record) => this.setStyle(record.key, record.currentValue));
    }
    /**
     * @private
     * @param {?} nameAndUnit
     * @param {?} value
     * @return {?}
     */
    setStyle(nameAndUnit, value) {
        const [name, unit] = nameAndUnit.split('.');
        value = value !== null && unit ? `${value}${unit}` : value;
        /** @type {?} */
        const svg = this.element.nativeElement.firstChild;
        if (value !== null) {
            this.renderer.setStyle(svg, name, (/** @type {?} */ (value)));
        }
        else {
            this.renderer.removeStyle(svg, name);
        }
    }
}
SvgIconComponent.decorators = [
    { type: Component, args: [{
                selector: 'svg-icon',
                template: '<ng-content></ng-content>',
                styles: [`:host { display: inline-block; }`]
            }] }
];
/** @nocollapse */
SvgIconComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: KeyValueDiffers },
    { type: Renderer2 },
    { type: SvgIconRegistryService }
];
SvgIconComponent.propDecorators = {
    src: [{ type: Input }],
    stretch: [{ type: Input }],
    svgStyle: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    SvgIconComponent.prototype.src;
    /** @type {?} */
    SvgIconComponent.prototype.stretch;
    /**
     * @type {?}
     * @private
     */
    SvgIconComponent.prototype.svg;
    /**
     * @type {?}
     * @private
     */
    SvgIconComponent.prototype.icnSub;
    /**
     * @type {?}
     * @private
     */
    SvgIconComponent.prototype.differ;
    /**
     * @type {?}
     * @private
     */
    SvgIconComponent.prototype._svgStyle;
    /**
     * @type {?}
     * @private
     */
    SvgIconComponent.prototype.element;
    /**
     * @type {?}
     * @private
     */
    SvgIconComponent.prototype.differs;
    /**
     * @type {?}
     * @private
     */
    SvgIconComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    SvgIconComponent.prototype.iconReg;
}
//# sourceMappingURL=data:application/json;base64,