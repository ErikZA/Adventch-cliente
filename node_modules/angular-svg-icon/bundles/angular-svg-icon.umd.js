(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('rxjs'), require('rxjs/operators'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('angular-svg-icon', ['exports', '@angular/core', '@angular/common/http', 'rxjs', 'rxjs/operators', '@angular/common'], factory) :
    (factory((global['angular-svg-icon'] = {}),global.ng.core,global.ng.common.http,global.rxjs,global.rxjs.operators,global.ng.common));
}(this, (function (exports,core,http,rxjs,operators,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var SERVER_URL = new core.InjectionToken('SERVER_URL');
    var SvgIconRegistryService = /** @class */ (function () {
        function SvgIconRegistryService(http$$1, platformId, serverUrl, _document) {
            this.http = http$$1;
            this.platformId = platformId;
            this.serverUrl = serverUrl;
            this._document = _document;
            this.iconsByUrl = new Map();
            this.iconsLoadingByUrl = new Map();
            this.document = this._document;
        }
        /** Add a SVG to the registry by passing a name and the SVG. */
        /**
         * Add a SVG to the registry by passing a name and the SVG.
         * @param {?} name
         * @param {?} data
         * @return {?}
         */
        SvgIconRegistryService.prototype.addSvg = /**
         * Add a SVG to the registry by passing a name and the SVG.
         * @param {?} name
         * @param {?} data
         * @return {?}
         */
            function (name, data) {
                if (!this.iconsByUrl.has(name)) {
                    /** @type {?} */
                    var div = this.document.createElement('DIV');
                    div.innerHTML = data;
                    /** @type {?} */
                    var svg = ( /** @type {?} */(div.querySelector('svg')));
                    this.iconsByUrl.set(name, svg);
                }
            };
        /** Load a SVG to the registry from a URL. */
        /**
         * Load a SVG to the registry from a URL.
         * @param {?} url
         * @return {?}
         */
        SvgIconRegistryService.prototype.loadSvg = /**
         * Load a SVG to the registry from a URL.
         * @param {?} url
         * @return {?}
         */
            function (url) {
                var _this = this;
                if (this.serverUrl && url.match(/^(http(s)?):/) === null) {
                    url = this.serverUrl + url;
                }
                if (this.iconsByUrl.has(url)) {
                    return rxjs.of(this.iconsByUrl.get(url));
                }
                else if (this.iconsLoadingByUrl.has(url)) {
                    return this.iconsLoadingByUrl.get(url);
                }
                else {
                    /** @type {?} */
                    var o = ( /** @type {?} */(this.http.get(url, { responseType: 'text' }).pipe(operators.map(function (svg) {
                        /** @type {?} */
                        var div = _this.document.createElement('DIV');
                        div.innerHTML = svg;
                        return ( /** @type {?} */(div.querySelector('svg')));
                    }), operators.tap(function (svg) { return _this.iconsByUrl.set(url, svg); }), operators.catchError(function (err) {
                        console.error(err);
                        return rxjs.throwError(err);
                    }), operators.finalize(function () { return _this.iconsLoadingByUrl.delete(url); }), operators.share())));
                    this.iconsLoadingByUrl.set(url, o);
                    return o;
                }
            };
        /** Remove a SVG from the registry by URL (or name). */
        /**
         * Remove a SVG from the registry by URL (or name).
         * @param {?} url
         * @return {?}
         */
        SvgIconRegistryService.prototype.unloadSvg = /**
         * Remove a SVG from the registry by URL (or name).
         * @param {?} url
         * @return {?}
         */
            function (url) {
                if (this.iconsByUrl.has(url)) {
                    this.iconsByUrl.delete(url);
                }
            };
        SvgIconRegistryService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        SvgIconRegistryService.ctorParameters = function () {
            return [
                { type: http.HttpClient },
                { type: Object, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] },
                { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [SERVER_URL,] }] },
                { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [common.DOCUMENT,] }] }
            ];
        };
        return SvgIconRegistryService;
    }());
    /**
     * @param {?} parentRegistry
     * @param {?} http
     * @param {?} platformId
     * @param {?=} serverUrl
     * @param {?=} document
     * @return {?}
     */
    function SVG_ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, http$$1, platformId, serverUrl, document) {
        return parentRegistry || new SvgIconRegistryService(http$$1, platformId, serverUrl, document);
    }
    /** @type {?} */
    var SVG_ICON_REGISTRY_PROVIDER = {
        provide: SvgIconRegistryService,
        deps: [[new core.Optional(), new core.SkipSelf(), SvgIconRegistryService], http.HttpClient, [( /** @type {?} */(core.PLATFORM_ID))],
            [new core.Optional(), ( /** @type {?} */(SERVER_URL))], [new core.Optional(), ( /** @type {?} */(common.DOCUMENT))]
        ],
        useFactory: SVG_ICON_REGISTRY_PROVIDER_FACTORY
    };

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SvgIconComponent = /** @class */ (function () {
        function SvgIconComponent(element, differs, renderer, iconReg) {
            this.element = element;
            this.differs = differs;
            this.renderer = renderer;
            this.iconReg = iconReg;
            this.stretch = false;
        }
        Object.defineProperty(SvgIconComponent.prototype, "svgStyle", {
            // Adapted from ngStyle
            set: 
            // Adapted from ngStyle
            /**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                this._svgStyle = v;
                if (!this.differ && v) {
                    this.differ = this.differs.find(v).create();
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        SvgIconComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.init();
            };
        /**
         * @return {?}
         */
        SvgIconComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.destroy();
            };
        /**
         * @param {?} changeRecord
         * @return {?}
         */
        SvgIconComponent.prototype.ngOnChanges = /**
         * @param {?} changeRecord
         * @return {?}
         */
            function (changeRecord) {
                if (changeRecord['src']) {
                    if (this.svg) {
                        this.destroy();
                    }
                    this.init();
                }
                if (changeRecord['stretch']) {
                    this.stylize();
                }
            };
        /**
         * @return {?}
         */
        SvgIconComponent.prototype.ngDoCheck = /**
         * @return {?}
         */
            function () {
                if (this.svg && this.differ) {
                    /** @type {?} */
                    var changes = this.differ.diff(this._svgStyle);
                    if (changes) {
                        this.applyChanges(changes);
                    }
                }
            };
        /**
         * @private
         * @return {?}
         */
        SvgIconComponent.prototype.init = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                this.icnSub = this.iconReg.loadSvg(this.src).subscribe(function (svg) {
                    _this.setSvg(svg);
                    _this.resetDiffer();
                });
            };
        /**
         * @private
         * @return {?}
         */
        SvgIconComponent.prototype.destroy = /**
         * @private
         * @return {?}
         */
            function () {
                this.svg = undefined;
                this.differ = undefined;
                if (this.icnSub) {
                    this.icnSub.unsubscribe();
                }
            };
        /**
         * @private
         * @return {?}
         */
        SvgIconComponent.prototype.resetDiffer = /**
         * @private
         * @return {?}
         */
            function () {
                if (this._svgStyle && !this.differ) {
                    this.differ = this.differs.find(this._svgStyle).create();
                }
            };
        /**
         * @private
         * @param {?} svg
         * @return {?}
         */
        SvgIconComponent.prototype.setSvg = /**
         * @private
         * @param {?} svg
         * @return {?}
         */
            function (svg) {
                if (svg) {
                    this.svg = svg;
                    /** @type {?} */
                    var icon = ( /** @type {?} */(svg.cloneNode(true)));
                    /** @type {?} */
                    var elem = this.element.nativeElement;
                    elem.innerHTML = '';
                    this.renderer.appendChild(elem, icon);
                    this.stylize();
                }
            };
        /**
         * @private
         * @return {?}
         */
        SvgIconComponent.prototype.stylize = /**
         * @private
         * @return {?}
         */
            function () {
                if (this.svg) {
                    /** @type {?} */
                    var svg = this.element.nativeElement.firstChild;
                    if (this.stretch === true) {
                        this.renderer.setAttribute(svg, 'preserveAspectRatio', 'none');
                    }
                    else if (this.stretch === false) {
                        this.renderer.removeAttribute(svg, 'preserveAspectRatio');
                    }
                }
            };
        /**
         * @private
         * @param {?} changes
         * @return {?}
         */
        SvgIconComponent.prototype.applyChanges = /**
         * @private
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                var _this = this;
                changes.forEachRemovedItem(function (record) { return _this.setStyle(record.key, null); });
                changes.forEachAddedItem(function (record) { return _this.setStyle(record.key, record.currentValue); });
                changes.forEachChangedItem(function (record) { return _this.setStyle(record.key, record.currentValue); });
            };
        /**
         * @private
         * @param {?} nameAndUnit
         * @param {?} value
         * @return {?}
         */
        SvgIconComponent.prototype.setStyle = /**
         * @private
         * @param {?} nameAndUnit
         * @param {?} value
         * @return {?}
         */
            function (nameAndUnit, value) {
                var _a = __read(nameAndUnit.split('.'), 2), name = _a[0], unit = _a[1];
                value = value !== null && unit ? "" + value + unit : value;
                /** @type {?} */
                var svg = this.element.nativeElement.firstChild;
                if (value !== null) {
                    this.renderer.setStyle(svg, name, ( /** @type {?} */(value)));
                }
                else {
                    this.renderer.removeStyle(svg, name);
                }
            };
        SvgIconComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'svg-icon',
                        template: '<ng-content></ng-content>',
                        styles: [":host { display: inline-block; }"]
                    }] }
        ];
        /** @nocollapse */
        SvgIconComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core.KeyValueDiffers },
                { type: core.Renderer2 },
                { type: SvgIconRegistryService }
            ];
        };
        SvgIconComponent.propDecorators = {
            src: [{ type: core.Input }],
            stretch: [{ type: core.Input }],
            svgStyle: [{ type: core.Input }]
        };
        return SvgIconComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AngularSvgIconModule = /** @class */ (function () {
        function AngularSvgIconModule() {
        }
        AngularSvgIconModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                        ],
                        declarations: [SvgIconComponent],
                        providers: [SVG_ICON_REGISTRY_PROVIDER],
                        exports: [SvgIconComponent]
                    },] }
        ];
        return AngularSvgIconModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.AngularSvgIconModule = AngularSvgIconModule;
    exports.SVG_ICON_REGISTRY_PROVIDER_FACTORY = SVG_ICON_REGISTRY_PROVIDER_FACTORY;
    exports.SERVER_URL = SERVER_URL;
    exports.SvgIconRegistryService = SvgIconRegistryService;
    exports.SVG_ICON_REGISTRY_PROVIDER = SVG_ICON_REGISTRY_PROVIDER;
    exports.SvgIconComponent = SvgIconComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,